/* tslint:disable */
/* eslint-disable */
/**
 * BassLines
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SongBase,
    SongBaseFromJSON,
    SongBaseToJSON,
    SpotifyProfile,
    SpotifyProfileFromJSON,
    SpotifyProfileToJSON,
    SpotifyTrack,
    SpotifyTrackFromJSON,
    SpotifyTrackToJSON,
    SpotifyTrackDetails,
    SpotifyTrackDetailsFromJSON,
    SpotifyTrackDetailsToJSON,
} from '../models';

export interface ModelGetRequest {
    code?: string;
}

export interface SearchGetRequest {
    query?: string;
}

export interface TrackIdDetailsGetRequest {
    id: string;
}

export interface TrackIdGetRequest {
    id: string;
}

/**
 * 
 */
export class SpotifyApi extends runtime.BaseAPI {

    /**
     */
    async apiSpotifyGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Spotify`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiSpotifyGet(initOverrides?: RequestInit): Promise<string> {
        const response = await this.apiSpotifyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async meGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<SpotifyProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotifyProfileFromJSON(jsonValue));
    }

    /**
     */
    async meGet(initOverrides?: RequestInit): Promise<SpotifyProfile> {
        const response = await this.meGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async modelGetRaw(requestParameters: ModelGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/model`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async modelGet(requestParameters: ModelGetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.modelGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async refreshGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/refresh`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async refreshGet(initOverrides?: RequestInit): Promise<void> {
        await this.refreshGetRaw(initOverrides);
    }

    /**
     */
    async searchGetRaw(requestParameters: SearchGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SongBase>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SongBaseFromJSON));
    }

    /**
     */
    async searchGet(requestParameters: SearchGetRequest, initOverrides?: RequestInit): Promise<Array<SongBase>> {
        const response = await this.searchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async trackIdDetailsGetRaw(requestParameters: TrackIdDetailsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SpotifyTrackDetails>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackIdDetailsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track/{id}/details`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotifyTrackDetailsFromJSON(jsonValue));
    }

    /**
     */
    async trackIdDetailsGet(requestParameters: TrackIdDetailsGetRequest, initOverrides?: RequestInit): Promise<SpotifyTrackDetails> {
        const response = await this.trackIdDetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async trackIdGetRaw(requestParameters: TrackIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SpotifyTrack>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotifyTrackFromJSON(jsonValue));
    }

    /**
     */
    async trackIdGet(requestParameters: TrackIdGetRequest, initOverrides?: RequestInit): Promise<SpotifyTrack> {
        const response = await this.trackIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
