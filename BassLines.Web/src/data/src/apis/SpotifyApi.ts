/* tslint:disable */
/* eslint-disable */
/**
 * BassLines
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ArtistDetails,
    ArtistDetailsFromJSON,
    ArtistDetailsToJSON,
    MyDevices,
    MyDevicesFromJSON,
    MyDevicesToJSON,
    PlayContextRequest,
    PlayContextRequestFromJSON,
    PlayContextRequestToJSON,
    SongBaseWithImages,
    SongBaseWithImagesFromJSON,
    SongBaseWithImagesToJSON,
    SpotifyProfile,
    SpotifyProfileFromJSON,
    SpotifyProfileToJSON,
    SpotifyTrack,
    SpotifyTrackFromJSON,
    SpotifyTrackToJSON,
    SpotifyTrackDetails,
    SpotifyTrackDetailsFromJSON,
    SpotifyTrackDetailsToJSON,
    TrackSavedReference,
    TrackSavedReferenceFromJSON,
    TrackSavedReferenceToJSON,
    TransferStateRequest,
    TransferStateRequestFromJSON,
    TransferStateRequestToJSON,
} from '../models';

export interface AddToQueueSpotifyIdPostRequest {
    spotifyId: string;
}

export interface ArtistsFromTrackIdsPostRequest {
    requestBody?: Array<string>;
}

export interface CheckSavedPostRequest {
    requestBody?: Array<string>;
}

export interface ModelGetRequest {
    code?: string;
}

export interface PlayPutRequest {
    playContextRequest?: PlayContextRequest;
}

export interface PlayerPutRequest {
    transferStateRequest?: TransferStateRequest;
}

export interface SaveOrRemoveIdPutRequest {
    id: string;
    save?: boolean;
}

export interface SearchArtistGetRequest {
    query?: string;
    pageSize?: number;
}

export interface SearchGetRequest {
    query?: string;
}

export interface ShufflePutRequest {
    shuffle?: boolean;
}

export interface TrackIdDetailsGetRequest {
    id: string;
}

export interface TrackIdGetRequest {
    id: string;
}

export interface TracksPostRequest {
    requestBody?: Array<string>;
}

/**
 * 
 */
export class SpotifyApi extends runtime.BaseAPI {

    /**
     */
    async addToQueueSpotifyIdPostRaw(requestParameters: AddToQueueSpotifyIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.spotifyId === null || requestParameters.spotifyId === undefined) {
            throw new runtime.RequiredError('spotifyId','Required parameter requestParameters.spotifyId was null or undefined when calling addToQueueSpotifyIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/add-to-queue/{spotifyId}`.replace(`{${"spotifyId"}}`, encodeURIComponent(String(requestParameters.spotifyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addToQueueSpotifyIdPost(requestParameters: AddToQueueSpotifyIdPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addToQueueSpotifyIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiSpotifyGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Spotify`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiSpotifyGet(initOverrides?: RequestInit): Promise<string> {
        const response = await this.apiSpotifyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async artistsFromTrackIdsPostRaw(requestParameters: ArtistsFromTrackIdsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ArtistDetails>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/artists-from-trackIds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArtistDetailsFromJSON));
    }

    /**
     */
    async artistsFromTrackIdsPost(requestParameters: ArtistsFromTrackIdsPostRequest, initOverrides?: RequestInit): Promise<Array<ArtistDetails>> {
        const response = await this.artistsFromTrackIdsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async checkSavedPostRaw(requestParameters: CheckSavedPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TrackSavedReference>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/check-saved`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackSavedReferenceFromJSON));
    }

    /**
     */
    async checkSavedPost(requestParameters: CheckSavedPostRequest, initOverrides?: RequestInit): Promise<Array<TrackSavedReference>> {
        const response = await this.checkSavedPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async devicesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<MyDevices>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/devices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MyDevicesFromJSON(jsonValue));
    }

    /**
     */
    async devicesGet(initOverrides?: RequestInit): Promise<MyDevices> {
        const response = await this.devicesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async meGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<SpotifyProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotifyProfileFromJSON(jsonValue));
    }

    /**
     */
    async meGet(initOverrides?: RequestInit): Promise<SpotifyProfile> {
        const response = await this.meGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async modelGetRaw(requestParameters: ModelGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/model`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async modelGet(requestParameters: ModelGetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.modelGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async playPutRaw(requestParameters: PlayPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/play`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlayContextRequestToJSON(requestParameters.playContextRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playPut(requestParameters: PlayPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.playPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async playerPutRaw(requestParameters: PlayerPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/player`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransferStateRequestToJSON(requestParameters.transferStateRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playerPut(requestParameters: PlayerPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.playerPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async refreshGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/refresh`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async refreshGet(initOverrides?: RequestInit): Promise<void> {
        await this.refreshGetRaw(initOverrides);
    }

    /**
     */
    async saveOrRemoveIdPutRaw(requestParameters: SaveOrRemoveIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TrackSavedReference>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveOrRemoveIdPut.');
        }

        const queryParameters: any = {};

        if (requestParameters.save !== undefined) {
            queryParameters['save'] = requestParameters.save;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/save-or-remove/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackSavedReferenceFromJSON(jsonValue));
    }

    /**
     */
    async saveOrRemoveIdPut(requestParameters: SaveOrRemoveIdPutRequest, initOverrides?: RequestInit): Promise<TrackSavedReference> {
        const response = await this.saveOrRemoveIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchArtistGetRaw(requestParameters: SearchArtistGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArtistDetails>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/artist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArtistDetailsFromJSON(jsonValue));
    }

    /**
     */
    async searchArtistGet(requestParameters: SearchArtistGetRequest, initOverrides?: RequestInit): Promise<ArtistDetails> {
        const response = await this.searchArtistGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchGetRaw(requestParameters: SearchGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SongBaseWithImages>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SongBaseWithImagesFromJSON));
    }

    /**
     */
    async searchGet(requestParameters: SearchGetRequest, initOverrides?: RequestInit): Promise<Array<SongBaseWithImages>> {
        const response = await this.searchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async shufflePutRaw(requestParameters: ShufflePutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.shuffle !== undefined) {
            queryParameters['shuffle'] = requestParameters.shuffle;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shuffle`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async shufflePut(requestParameters: ShufflePutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.shufflePutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async trackIdDetailsGetRaw(requestParameters: TrackIdDetailsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SpotifyTrackDetails>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackIdDetailsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track/{id}/details`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotifyTrackDetailsFromJSON(jsonValue));
    }

    /**
     */
    async trackIdDetailsGet(requestParameters: TrackIdDetailsGetRequest, initOverrides?: RequestInit): Promise<SpotifyTrackDetails> {
        const response = await this.trackIdDetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async trackIdGetRaw(requestParameters: TrackIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SpotifyTrack>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpotifyTrackFromJSON(jsonValue));
    }

    /**
     */
    async trackIdGet(requestParameters: TrackIdGetRequest, initOverrides?: RequestInit): Promise<SpotifyTrack> {
        const response = await this.trackIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tracksPostRaw(requestParameters: TracksPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SpotifyTrackDetails>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tracks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SpotifyTrackDetailsFromJSON));
    }

    /**
     */
    async tracksPost(requestParameters: TracksPostRequest, initOverrides?: RequestInit): Promise<Array<SpotifyTrackDetails>> {
        const response = await this.tracksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
