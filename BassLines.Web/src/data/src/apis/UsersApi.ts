/* tslint:disable */
/* eslint-disable */
/**
 * BassLines
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LoginModel,
    LoginModelFromJSON,
    LoginModelToJSON,
    RegistrationModel,
    RegistrationModelFromJSON,
    RegistrationModelToJSON,
    ResetPasswordModel,
    ResetPasswordModelFromJSON,
    ResetPasswordModelToJSON,
    UserLeaderboardModel,
    UserLeaderboardModelFromJSON,
    UserLeaderboardModelToJSON,
    UserMetricsModel,
    UserMetricsModelFromJSON,
    UserMetricsModelToJSON,
    UserModel,
    UserModelFromJSON,
    UserModelToJSON,
} from '../models';

export interface UsersGetPasswordResetTokenGetRequest {
    username?: string;
}

export interface UsersPostRequest {
    registrationModel?: RegistrationModel;
}

export interface UsersResetUserPasswordPostRequest {
    resetPasswordModel?: ResetPasswordModel;
}

export interface UsersSignInPostRequest {
    loginModel?: LoginModel;
}

export interface UsersUserMetricsGetRequest {
    userId?: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async usersAllUsersGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Users/AllUsers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserModelFromJSON));
    }

    /**
     */
    async usersAllUsersGet(initOverrides?: RequestInit): Promise<Array<UserModel>> {
        const response = await this.usersAllUsersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async usersGetPasswordResetTokenGetRaw(requestParameters: UsersGetPasswordResetTokenGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Users/GetPasswordResetToken`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersGetPasswordResetTokenGet(requestParameters: UsersGetPasswordResetTokenGetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersGetPasswordResetTokenGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersLeaderboardMetricsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserLeaderboardModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Users/LeaderboardMetrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserLeaderboardModelFromJSON));
    }

    /**
     */
    async usersLeaderboardMetricsGet(initOverrides?: RequestInit): Promise<Array<UserLeaderboardModel>> {
        const response = await this.usersLeaderboardMetricsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async usersLogoutGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Users/Logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersLogoutGet(initOverrides?: RequestInit): Promise<void> {
        await this.usersLogoutGetRaw(initOverrides);
    }

    /**
     */
    async usersPostRaw(requestParameters: UsersPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrationModelToJSON(requestParameters.registrationModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersPost(requestParameters: UsersPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersResetUserPasswordPostRaw(requestParameters: UsersResetUserPasswordPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Users/ResetUserPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordModelToJSON(requestParameters.resetPasswordModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersResetUserPasswordPost(requestParameters: UsersResetUserPasswordPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersResetUserPasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersSignInPostRaw(requestParameters: UsersSignInPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Users/SignIn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginModelToJSON(requestParameters.loginModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserModelFromJSON(jsonValue));
    }

    /**
     */
    async usersSignInPost(requestParameters: UsersSignInPostRequest, initOverrides?: RequestInit): Promise<UserModel> {
        const response = await this.usersSignInPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersUserMetricsGetRaw(requestParameters: UsersUserMetricsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserMetricsModel>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Users/UserMetrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserMetricsModelFromJSON(jsonValue));
    }

    /**
     */
    async usersUserMetricsGet(requestParameters: UsersUserMetricsGetRequest, initOverrides?: RequestInit): Promise<UserMetricsModel> {
        const response = await this.usersUserMetricsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
