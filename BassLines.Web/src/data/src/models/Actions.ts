/* tslint:disable */
/* eslint-disable */
/**
 * BassLines
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Actions
 */
export interface Actions {
    /**
     * 
     * @type {boolean}
     * @memberof Actions
     */
    interruptingPlayback?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Actions
     */
    pausing?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Actions
     */
    resuming?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Actions
     */
    seeking?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Actions
     */
    skippingNext?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Actions
     */
    skippingPrev?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Actions
     */
    togglingRepeatContext?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Actions
     */
    togglingShuffle?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Actions
     */
    togglingRepeatTrack?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Actions
     */
    transferringPlayback?: boolean;
}

export function ActionsFromJSON(json: any): Actions {
    return ActionsFromJSONTyped(json, false);
}

export function ActionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Actions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'interruptingPlayback': !exists(json, 'interrupting_playback') ? undefined : json['interrupting_playback'],
        'pausing': !exists(json, 'pausing') ? undefined : json['pausing'],
        'resuming': !exists(json, 'resuming') ? undefined : json['resuming'],
        'seeking': !exists(json, 'seeking') ? undefined : json['seeking'],
        'skippingNext': !exists(json, 'skipping_next') ? undefined : json['skipping_next'],
        'skippingPrev': !exists(json, 'skipping_prev') ? undefined : json['skipping_prev'],
        'togglingRepeatContext': !exists(json, 'toggling_repeat_context') ? undefined : json['toggling_repeat_context'],
        'togglingShuffle': !exists(json, 'toggling_shuffle') ? undefined : json['toggling_shuffle'],
        'togglingRepeatTrack': !exists(json, 'toggling_repeat_track') ? undefined : json['toggling_repeat_track'],
        'transferringPlayback': !exists(json, 'transferring_playback') ? undefined : json['transferring_playback'],
    };
}

export function ActionsToJSON(value?: Actions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'interrupting_playback': value.interruptingPlayback,
        'pausing': value.pausing,
        'resuming': value.resuming,
        'seeking': value.seeking,
        'skipping_next': value.skippingNext,
        'skipping_prev': value.skippingPrev,
        'toggling_repeat_context': value.togglingRepeatContext,
        'toggling_shuffle': value.togglingShuffle,
        'toggling_repeat_track': value.togglingRepeatTrack,
        'transferring_playback': value.transferringPlayback,
    };
}

